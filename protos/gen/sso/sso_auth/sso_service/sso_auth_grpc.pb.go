// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: sso_service/sso_auth.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SSOAuthService_SignUp_FullMethodName       = "/social_network.proto.sso.auth.SSOAuthService/SignUp"
	SSOAuthService_SignIn_FullMethodName       = "/social_network.proto.sso.auth.SSOAuthService/SignIn"
	SSOAuthService_SignOut_FullMethodName      = "/social_network.proto.sso.auth.SSOAuthService/SignOut"
	SSOAuthService_RefreshToken_FullMethodName = "/social_network.proto.sso.auth.SSOAuthService/RefreshToken"
)

// SSOAuthServiceClient is the client API for SSOAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSOAuthServiceClient interface {
	SignUp(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SignUpRequest, SignUpResponse], error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*SignOutResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
}

type sSOAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSSOAuthServiceClient(cc grpc.ClientConnInterface) SSOAuthServiceClient {
	return &sSOAuthServiceClient{cc}
}

func (c *sSOAuthServiceClient) SignUp(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SignUpRequest, SignUpResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SSOAuthService_ServiceDesc.Streams[0], SSOAuthService_SignUp_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SignUpRequest, SignUpResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SSOAuthService_SignUpClient = grpc.ClientStreamingClient[SignUpRequest, SignUpResponse]

func (c *sSOAuthServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, SSOAuthService_SignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOAuthServiceClient) SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*SignOutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignOutResponse)
	err := c.cc.Invoke(ctx, SSOAuthService_SignOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOAuthServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, SSOAuthService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSOAuthServiceServer is the server API for SSOAuthService service.
// All implementations must embed UnimplementedSSOAuthServiceServer
// for forward compatibility.
type SSOAuthServiceServer interface {
	SignUp(grpc.ClientStreamingServer[SignUpRequest, SignUpResponse]) error
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	SignOut(context.Context, *SignOutRequest) (*SignOutResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	mustEmbedUnimplementedSSOAuthServiceServer()
}

// UnimplementedSSOAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSSOAuthServiceServer struct{}

func (UnimplementedSSOAuthServiceServer) SignUp(grpc.ClientStreamingServer[SignUpRequest, SignUpResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedSSOAuthServiceServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedSSOAuthServiceServer) SignOut(context.Context, *SignOutRequest) (*SignOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (UnimplementedSSOAuthServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedSSOAuthServiceServer) mustEmbedUnimplementedSSOAuthServiceServer() {}
func (UnimplementedSSOAuthServiceServer) testEmbeddedByValue()                        {}

// UnsafeSSOAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSOAuthServiceServer will
// result in compilation errors.
type UnsafeSSOAuthServiceServer interface {
	mustEmbedUnimplementedSSOAuthServiceServer()
}

func RegisterSSOAuthServiceServer(s grpc.ServiceRegistrar, srv SSOAuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedSSOAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SSOAuthService_ServiceDesc, srv)
}

func _SSOAuthService_SignUp_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SSOAuthServiceServer).SignUp(&grpc.GenericServerStream[SignUpRequest, SignUpResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SSOAuthService_SignUpServer = grpc.ClientStreamingServer[SignUpRequest, SignUpResponse]

func _SSOAuthService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOAuthServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOAuthService_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOAuthServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOAuthService_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOAuthServiceServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOAuthService_SignOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOAuthServiceServer).SignOut(ctx, req.(*SignOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOAuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOAuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOAuthService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOAuthServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SSOAuthService_ServiceDesc is the grpc.ServiceDesc for SSOAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSOAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "social_network.proto.sso.auth.SSOAuthService",
	HandlerType: (*SSOAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _SSOAuthService_SignIn_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _SSOAuthService_SignOut_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _SSOAuthService_RefreshToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SignUp",
			Handler:       _SSOAuthService_SignUp_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sso_service/sso_auth.proto",
}
